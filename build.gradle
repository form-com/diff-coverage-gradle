buildscript {
    ext.kotlin_version = '1.6.10'

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.form-com.diff-coverage-gradle:diff-coverage:0.9.3'
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.20.0"
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'base'
apply plugin: 'jacoco'
apply plugin: 'com.form.diff-coverage'
apply plugin: 'test-report-aggregation'

dependencies {
    allprojects {
        testReportAggregation project
    }
}

reporting {
    reports {
        testAggregateTestReport(AggregateTestReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.named('check') {
    dependsOn testAggregateTestReport
    dependsOn subprojects.check
}

ext {
    kotest_version = '5.1.0'
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: "io.gitlab.arturbosch.detekt"

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.18.0'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
        kotlinOptions.apiVersion = '1.3'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    sourceCompatibility = 1.8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacoco {
        toolVersion = "0.8.8"
    }

    jacocoTestReport {
        reports {
            html.required = true
        }
        executionData.from fileTree(buildDir).include("/jacoco/*.exec")
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    group 'verification'
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        xml.required = true
        html.required = true
    }
}

diffCoverageReport {
    def diffBase = project.hasProperty('diffBase') ? project.diffBase : 'HEAD'
    diffSource.git.compareWith diffBase

    if (project.hasProperty("github")) {
        jacocoExecFiles = fileTree("tests-artifacts/jacoco") { include("**/*.exec") }
    }

    reports {
        html = true
        xml = true
    }
    violationRules.failIfCoverageLessThan 0.9
}
