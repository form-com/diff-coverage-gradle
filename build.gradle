import java.nio.file.Files

buildscript {
    ext.kotlin_version = '1.3.72'

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.form-com.diff-coverage-gradle:diff-coverage:0.7.0'
    }
}

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'jacoco'
apply plugin: 'com.form.diff-coverage'

group 'com.form'

subprojects{
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    version '0.7.1'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile 'org.jacoco:org.jacoco.core:0.8.4'
        compile 'org.jacoco:org.jacoco.report:0.8.4'
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.0'

        testImplementation 'io.kotest:kotest-runner-junit5-jvm:4.0.7'
        testImplementation 'io.kotest:kotest-assertions-core-jvm:4.0.7'
        testImplementation 'io.kotest:kotest-property-jvm:4.0.7'
        testImplementation 'io.mockk:mockk:1.10.0'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    sourceCompatibility = 1.8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacoco {
        toolVersion = "0.8.5"
    }

    jacocoTestReport {
        reports {
            html.enabled = true
        }
        executionData.from fileTree(buildDir).include("/jacoco/*.exec")
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    group 'verification'
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

diffCoverageReport {
    def diffBase = project.hasProperty('diffBase') ? project.diffBase : 'HEAD'

    diffSource.git.compareWith diffBase
    jacocoExecFiles = files(subprojects.jacocoTestReport.executionData)
    classesDirs = files(subprojects.jacocoTestReport.classDirectories)
    srcDirs = files(subprojects.jacocoTestReport.sourceDirectories)

    reports {
        html = true
    }

    violationRules {
        minBranches = 0.9
        minLines = 0.9
        minInstructions = 0.9
        failOnViolation = true
    }
}

task clean {
    doLast {
        delete project.buildDir
    }
}
